package main

import (
	"path/filepath"
	"strings"

	"github.com/ysmood/kit"
	"github.com/ysmood/lookpath"
)

var slash = filepath.FromSlash

func main() {
	lint()

	build := kit.S(`// generated by running "go generate" on project root

package assets

// Helper for rod
var Helper = {{.helper}}

// MousePointer for rod
var MousePointer = {{.mousePointer}}

// Monitor for rod
var Monitor = {{.monitor}}

// MonitorPage for rod
var MonitorPage = {{.monitorPage}}

// DeviceList for rod
var DeviceList = {{.deviceList}}
`,
		"helper", get("helper.js"),
		"mousePointer", get("../../fixtures/mouse-pointer.svg"),
		"monitor", get("monitor.html"),
		"monitorPage", get("monitor-page.html"),
		"deviceList", getDeviceList(),
	)

	kit.E(kit.OutputFile(slash("lib/assets/assets.go"), build, nil))

}

func get(path string) string {
	code, err := kit.ReadString(slash("lib/assets/" + path))
	kit.E(err)
	return encode(code)
}

// not using encoding like base64 or gzip because of they will make git diff every large for small change
func encode(s string) string {
	return "`" + strings.ReplaceAll(s, "`", "` + \"`\" + `") + "`"
}

func lint() {
	defer kit.CD(slash("lib/assets"))()

	eslint, err := lookpath.LookPath(slash("node_modules/.bin"), "eslint")

	// install eslint if we don't have it
	if err != nil {
		kit.Exec("npm", "i", "--no-audit", "--no-fund").MustDo()
		eslint, err = lookpath.LookPath(slash("node_modules/.bin"), "eslint")
		kit.E(err)
	}

	kit.Exec(eslint, "--fix", ".").MustDo()
}

func getDeviceList() string {
	// we use the list from the web UI of devtools
	data := kit.Req(
		"https://raw.githubusercontent.com/ChromeDevTools/devtools-frontend/master/front_end/emulated_devices/module.json",
	).MustJSON().Get("extensions").Raw

	return encode(data)
}
